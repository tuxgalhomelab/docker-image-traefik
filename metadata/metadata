#!/usr/bin/env bash
set -E -e -o pipefail

# Add repo specific metadata here.

BASE_IMAGE_CONFIG_KEY_PREFIX="BASE_IMAGE"

UPSTREAM_PACKAGE_NAME="Traefik/Go/nvm/Node.js"
UPSTREAM_TRAEFIK_VERSION_CONFIG_KEY="TRAEFIK_VERSION"
UPSTREAM_TRAEFIK_GIT_REPO="https://github.com/traefik/traefik"
GIT_REPO_TAGS_CUSTOM_FILTERING_REGEX='^v.+\-rc.+$'
UPSTREAM_GO_IMAGE_NAME_CONFIG_KEY="GO_IMAGE_NAME"
UPSTREAM_GO_IMAGE_TAG_CONFIG_KEY="GO_IMAGE_TAG"
UPSTREAM_GO_IMAGE_PATTERN="^[0-9]+\.[0-9]+\.[0-9]+-go-.+$"
UPSTREAM_NVM_VERSION_CONFIG_KEY="NVM_VERSION"
UPSTREAM_NODEJS_VERSION_CONFIG_KEY="IMAGE_NODEJS_VERSION"
UPSTREAM_NVM_CHECKSUM_CONFIG_KEY="NVM_SHA256_CHECKSUM"
UPSTREAM_NVM_GIT_REPO="https://github.com/nvm-sh/nvm"

RELEASE_PACKAGE_NAME="Traefik"
RELEASE_PACKAGE_VERSION_CONFIG_KEY="TRAEFIK_VERSION"
RELEASE_TAG_PACKAGE_NAME="traefik"

TEST_TYPE="background"
TEST_CONTAINER_TYPE="traefik"
TEST_CONTAINER_START_WAIT_SECONDS="5"

current_traefik_version() {
    get_config_arg ${UPSTREAM_TRAEFIK_VERSION_CONFIG_KEY:?}
}

current_go_image_version() {
    get_config_arg ${UPSTREAM_GO_IMAGE_TAG_CONFIG_KEY:?}
}

current_nvm_version() {
    get_config_arg ${UPSTREAM_NVM_VERSION_CONFIG_KEY:?}
}

current_node_version() {
    get_config_arg ${UPSTREAM_NODEJS_VERSION_CONFIG_KEY:?}
}

current_upstream_version() {
    local traefik_ver="$(current_traefik_version)"
    local go_image_ver="$(current_go_image_version)"
    local nvm_ver="$(current_nvm_version)"
    local node_ver="$(current_node_version)"
    echo "${traefik_ver:?}/${go_image_ver:?}/${nvm_ver:?}/${node_ver:?}"
}

latest_traefik_version() {
    git_remote_repo_latest_tag "${UPSTREAM_TRAEFIK_GIT_REPO:?}"
}

latest_go_image_version() {
    dockerhub_latest_tag \
        "$(get_config_arg ${UPSTREAM_GO_IMAGE_NAME_CONFIG_KEY:?})" \
        "${UPSTREAM_GO_IMAGE_PATTERN:?}"
}

latest_nvm_version() {
    git_remote_repo_latest_tag "${UPSTREAM_NVM_GIT_REPO:?}"
}

latest_node_version() {
    curl --silent --fail --location --show-error https://nodejs.org/dist/index.tab | \
        tail -n+2 | \
        cut -d $'\t' -f 1 | \
        sort --version-sort --reverse | \
        head -1
}

latest_upstream_version() {
    local traefik_ver="$(latest_traefik_version)"
    local go_image_ver="$(latest_go_image_version)"
    local nvm_ver="$(latest_nvm_version)"
    local node_ver="$(latest_node_version)"
    echo "${traefik_ver:?}/${go_image_ver:?}/${nvm_ver:?}/${node_ver:?}"
}

update_latest_upstream_version() {
    local cur_ver="${1:?}"
    local latest_ver="${2:?}"
    local cur_traefik_ver="$(echo "${cur_ver:?}" | cut -d '/' -f 1)"
    local cur_go_ver="$(echo "${cur_ver:?}" | cut -d '/' -f 2)"
    local cur_nvm_ver="$(echo "${cur_ver:?}" | cut -d '/' -f 3)"
    local cur_node_ver="$(echo "${cur_ver:?}" | cut -d '/' -f 4)"
    local latest_traefik_ver="$(echo "${latest_ver:?}" | cut -d '/' -f 1)"
    local latest_go_ver="$(echo "${latest_ver:?}" | cut -d '/' -f 2)"
    local latest_nvm_ver="$(echo "${latest_ver:?}" | cut -d '/' -f 3)"
    local latest_node_ver="$(echo "${latest_ver:?}" | cut -d '/' -f 4)"
    local latest_nvm_sha256_checksum="$(github_repo_archive_sha256_checksum ${UPSTREAM_NVM_GIT_REPO:?} ${latest_nvm_ver:?})"

    echo "Updating ${UPSTREAM_PACKAGE_NAME:?} ${UPSTREAM_TRAEFIK_VERSION_CONFIG_KEY:?}/${UPSTREAM_GO_IMAGE_TAG_CONFIG_KEY}/${UPSTREAM_NVM_VERSION_CONFIG_KEY:?}/${UPSTREAM_NODEJS_VERSION_CONFIG_KEY:?} '${cur_ver:?}' -> '${latest_ver:?}'"
    set_config_arg "${UPSTREAM_TRAEFIK_VERSION_CONFIG_KEY:?}" "${latest_traefik_ver:?}"
    set_config_arg "${UPSTREAM_GO_IMAGE_TAG_CONFIG_KEY:?}" "${latest_go_ver:?}"
    set_config_arg "${UPSTREAM_NVM_VERSION_CONFIG_KEY:?}" "${latest_nvm_ver:?}"
    set_config_arg "${UPSTREAM_NVM_CHECKSUM_CONFIG_KEY:?}" "${latest_nvm_sha256_checksum:?}"
    set_config_arg "${UPSTREAM_NODEJS_VERSION_CONFIG_KEY:?}" "${latest_node_ver:?}"
    git add ${ARGS_FILE:?}
}

package_current_release_version() {
    get_config_arg "${RELEASE_PACKAGE_VERSION_CONFIG_KEY:?}"
}

test_start_container() {
    local container_name="${1:?}"

    docker run \
        --user root \
        --name ${container_name:?} \
        --detach \
        --rm \
        --volume "${PWD:?}/metadata/dummy-http-server.sh:/opt/bin/dummy-http-server:ro" \
        ${IMAGE:?}
}

test_image_after_container_startup() {
    local container_name="${1:?}"
    local ip="$(container_ip "${container_name:?}")"
    docker exec \
        --user root \
        "${container_name:?}" \
        homelab install netcat-openbsd
    docker exec \
        --detach \
        --interactive \
        --tty \
        "${container_name:?}" \
        dummy-http-server localhost 8081
    # Wait for the dummy-http-server to start.
    sleep 2
    test_http_endpoint "${container_name:?}" http ${ip:?} 8080
}
